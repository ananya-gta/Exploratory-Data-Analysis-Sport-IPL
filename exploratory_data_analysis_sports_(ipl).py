# -*- coding: utf-8 -*-
"""Exploratory Data Analysis- Sports (IPL)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lvWWtzr1g0VCtf4h7a_cQNOVZUf8Gqos

# **Ananya Gupta**

### DATASET: matches.csv (https://bit.ly/34SRn3b ) 

## **EXPLORATORY DATA ANALYSIS - SPORTS**

### **Loading Packages**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import seaborn as sns 
# %matplotlib inline

"""### **Reading the csv file to Pandas Dataframe**"""

df = pd.read_csv('matches.csv')

"""###  **Print the first 5 rows**"""

df.head()

"""### **Full Summary of the Dataframe**"""

df.info()

"""### **Statistical details of the Dataset**"""

df.describe()

"""### **Observations:**

**The following inferences can be made from the describe() method:**

The .csv file has data of IPL matches starting from the season 2008 to 2019.

The biggest margin of victory for the team batting first(win_by_runs) is 146 runs.

The biggest victory of the team batting second(win_by_wickets) is by 10 wickets.

75% of the victorious teams that bat first won by a margin of 19 runs.

75% of the victorious teams that bat second won by a margin of 6 wickets.

There were 756 IPL matches hosted from 2008 to 2019.

### **Shape of the Dataset**
"""

df.shape

"""**So there are 756 rows and 18 columns. 756 rows imply that there were 756 IPL matches held between 2008 and 2019.**

### **Finding all the column names inside the Dataset**
"""

df.columns

"""**The dataset has 18 columns. Let’s get acquainted with the columns.**

**id:** The IPL match id.

**season:** The IPL season

**city:** The city where the IPL match was held.

**date:** The date on which the match was held.

**team1:**One of the teams of the IPL match

**team2:** The other team of the IPL match

**toss_winner:** The team that won the toss

**toss_decision**: The decision taken by the team that won the toss to ‘bat’ or ‘field’

**result:** The result(‘normal’, ‘tie’, ‘no result’) of the match.

**dl_applied:** (1 or 0)indicates whether the Duckworth-Lewis rule was applied or not.

**winner:** The winner of the match.

**win_by_runs:** Provides the runs by which the team batting first won

**win_by_runs:** Provides the number of wickets by which the team batting second won.

**player_of_match:** The outstanding player of the match.

**venue:** The venue where the match was hosted.

**umpire1:** One of the two on-field umpires who officiate the match.

**umpire2:** One of the two on-field umpires who officiate the match.

**umpire3**: The off-field umpire who officiates the match
"""

df.nunique()

"""### **It’s imperative to know the count of NaN values for each column before we proceed further.**"""

df.isnull().sum()

"""### **The column ‘umpire3’ has a significant number of NaN values. As the off-field umpire parameter is insignificant, we can drop this column. The other columns that have Nan values are of type object(Pandas equivalent of Python String data type) and are very few in number(<=7).**"""

df=df.drop(columns=['umpire3'], axis=1)

df.head()

"""### **Total Number of Matches in the Dataset**"""

df['id'].max()

"""### **Seasons in the Dataset**"""

df['season'].unique()

df['season'].nunique()

"""### **Team Won by Maximum Runs**"""

df.iloc[df['win_by_runs'].idxmax()]['winner']

""" **Details about the match which was won by 'Mumbai Indians' by maximum runs:**"""

df.iloc[df['win_by_runs'].idxmax()]

"""### **Team Won by Maximum Wickets**"""

df.iloc[df['win_by_wickets'].idxmax()]['winner']

"""### **Team Won by Minimum Runs**"""

df.iloc[df['win_by_runs'].idxmin()]['winner']

"""### **Team Won by Minimum Wickets**


"""

df.iloc[df['win_by_wickets'].idxmin()]['winner']

"""### **Which umpire has officiated the most number of IPL matches on-field?**"""

umpire1 = df['umpire1'].value_counts()
umpire2 = df['umpire2'].value_counts()

umpires_df = pd.concat([umpire1, umpire2], axis=1)
umpires_df

umpire = umpires_df.sum(axis=1)

umpire_df = pd.DataFrame(columns=["umpire", "matches"])

for items in umpire.iteritems():
    temp_df = pd.DataFrame({
        'umpire':[items[0]],
        'matches':[items[1]]
    })
    umpire_df= umpire_df.append(temp_df)

umpire_df.sort_values('matches', ascending=False).head()

"""### **S. Ravi(Sundaram Ravi) has officiated the most number of IPL matches on-field, followed by former Sri Lankan international cricketer HDPK Dharmasena.**

# **Exploratory Analysis and Visualization**
### **Now that our data set has been cleaned up, it’s time to do the in-depth analysis and visualization.**

### **The Season which had most number of matches played.**
"""

plt.figure(figsize=(19,7))
sns.countplot(x='season', data=df)
plt.show()

"""**Maximum number of matches were played in '2013'.**

# **The team with the most number of wins per season.**

**Let’s analyze the team with the most wins in each season.**
"""

teams_per_season = df.groupby('season')['winner'].value_counts()
year = 2008
win_per_season_df = pd.DataFrame(columns=['year', 'team', 'wins'])
for items in teams_per_season.iteritems():    
    if items[0][0]==year:
        print(items)
        win_series = pd.DataFrame({
            'year': [items[0][0]],
            'team': [items[0][1]],
            'wins': [items[1]]
        })
        win_per_season_df = win_per_season_df.append(win_series)
        year += 1

"""### **The number of wins is a discrete value. Hence, we will plot a bar chart(barplot in Seaborn).**"""

plt.figure(figsize=(25,10))
sns.barplot(x='wins', y='team', hue='year', data=win_per_season_df, palette='Paired');
plt.show()

"""**From the barplot, we can easily make inferences regarding the year in which a particular team has scored the maximum wins(and also the number of wins).**

### **We can clearly see that Mumbai Indians has secured the most wins in four seasons(2010, 2013, 2017, and 2019).**
"""

plt.figure(figsize=(19,8))
data = df.winner.value_counts()
sns.barplot(y = data.index, x = data, orient='h')
plt.show()

df.iloc[df['season'].idxmax()]['venue']

"""# **The venue that hosted the maximum number of matches**"""

venue_df = pd.DataFrame(columns=['Venue', 'Matches'])
for items in venue.iteritems():
    temp_df = pd.DataFrame({
        'Venue':[items[0]],
        'Matches':[items[1]]
    })
    venue_df = venue_df.append(temp_df)

plt.figure(figsize=(19,10))
plt.title("IPL Venues")
sns.barplot(x='Matches', y='Venue', data=venue_df);
plt.show()

"""## **Observations:**

### **Eden Gardens has hosted the maximum number of IPL matches followed by Wankhede Stadium and M Chinnaswamy Stadium.**
### **Till 2019, IPL matches were hosted by 40 venues.**

# **The most successful IPL Team**
### **In a game of sports, every team competes for victory. Hence, the team that has registered the most number of victories is the most successful.**
"""

team_wins_df= pd.DataFrame(columns=["Team","Wins"])
for items in team_wins.iteritems():
    temp=pd.DataFrame({'Team': [items[0]], 'Wins': [items[1]]})
    team_wins_df= team_wins_df.append(temp)

plt.figure(figsize=(30,8))
plt.title("The Most Successful IPL Team")
sns.barplot(x='Wins', y='Team', data=team_wins_df, palette='Paired');
plt.show()

"""## **Observations:**
### **Mumbai Indians is the most successful team(as they have won the maximum number of IPL matches -109) followed by Chennai Super Kings and Kolkata Knight Riders.**

# **Most Valuable Player**
### **Winning matters the most in a competitive league match. If a player makes the most significant contribution to his team’s victory, then he’s chosen as the player_of_match. The player who has won the player_of_match title on most occasions is the most valuable player.**
"""

mvp_df= pd.DataFrame(columns=['Player', 'No. of Wins'])
count=0
for items in player_of_the_match.iteritems():
    if count>9:
        break
    else:
         temp_df1= pd.DataFrame({'Player': [items[0]], 'No. of Wins': [items[1]]})
         mvp_df=mvp_df.append(temp_df1)
         count+=1

plt.figure(figsize=(19,8))
plt.title("The Most Valuable Top 10 Players")
sns.barplot(x='Player', y='No. of Wins', data=mvp_df, palette='Paired');
plt.show()

"""## **Observations:**
### **Cris Gayle is the player who won the most player of the match awards and hence is the most valuable player.**

# **The team that won the most number of Tosses**
"""

toss = df['toss_winner'].value_counts()

toss_df = pd.DataFrame(columns=["team", "wins"])

for items in toss.iteritems():
    temp_df3 = pd.DataFrame({
        'team':[items[0]],
        'wins':[items[1]]
    })
    toss_df = toss_df.append(temp_df3, ignore_index=True)

plt.figure(figsize=(22,8))
plt.title("How IPL Teams fared in toss?")
sns.barplot(x='wins', y='team', data=toss_df, palette='Paired');
plt.show()

"""## **Observations:**

### **Mumbai Indians has won the most toss(till 2019) in IPL history. All the top teams in IPL are successful in winning the toss as well.**

# **City which has hosted the maximum number of IPL matches**
"""

city= df['city'].value_counts()
city_df=pd.DataFrame(columns=['City Names', 'No.Of Matches Hosted'])
for items in city.iteritems():
    temp_df=pd.DataFrame({'City Names': [items[0]], 'No. of Matches Hosted': [items[1]]})
    city_df= city_df.append(temp_df)

plt.figure(figsize=(22,8))
plt.title("City which hosted maximum number of matches")
sns.barplot(x='No. of Matches Hosted', y='City Names', data=city_df, palette='Paired');
plt.show()

"""## **Observation:**
### **The city of Mumbai has hosted the maximum number of IPL matches.**

# **Inferences and Conclusion**
## **Let’s summarize the important observations we made during Exploratory Data Analysis:**



*   Mumbai Indians is the most successful team in IPL.
*   Mumbai Indians has won the most number of toss.

*   There were more matches won by chasing the total(419 matches) than defending(350 matches).

*   When defending a total, the biggest victory was by 146 runs(Mumbai Indians defeated Delhi Daredevils by 146 runs on 06 May 2017 at Feroz Shah Kotla stadium, Delhi).

*   When chasing a target, the biggest victory was by 10 wickets(without losing any wickets) and there were 11 such instances.

*   The Mumbai city has hosted the most number of IPL matches.

*   Chris Gayle has won the maximum number of player of the match title.
*   Winning toss gives a slight edge(52% probability of winning) against the opponents.


*   Five Indian players have figured in the top ten IPL players list.


*   S. Ravi(Sundaram Ravi) has officiated the most number of IPL matches on-field.


*   Eden Gardens has hosted the maximum number of IPL matches.


*   Till 2019, 40 venues have hosted 756 IPL matches.

# **Thankyou !**
"""
